const express = require('express');
const mysql = require('mysql2/promise');
const cors = require('cors');

const app = express();

// Middleware
app.use(cors());
app.use(express.json());

// MySQL BaÄŸlantÄ± Havuzu
const db = mysql.createPool({
  host: 'localhost',
  user: 'root',
  password: '',
  database: 'depo',
  waitForConnections: true,
  connectionLimit: 10,
  queueLimit: 0
});

// VeritabanÄ± baÄŸlantÄ±sÄ±nÄ± test et
db.getConnection()
  .then(connection => {
    console.log('âœ… MySQL baÄŸlantÄ±sÄ± baÅŸarÄ±lÄ±!');
    connection.release();
  })
  .catch(err => {
    console.error('MySQL baÄŸlantÄ± hatasÄ±:', err);
    process.exit(1);
  });

// TÃ¼m stoklarÄ± getir
app.get('/stoklar', async (req, res) => {
  try {
    const [results] = await db.query('SELECT * FROM stoklar');
    res.json(results);
  } catch (err) {
    console.error('ğŸ›‘ VeritabanÄ± sorgu hatasÄ±:', err);
    res.status(500).json({ hata: "VeritabanÄ± hatasÄ±" });
  }
});

// Stok gÃ¼ncelleme
app.patch('/stoklar/:id', async (req, res) => {
  const { id } = req.params;
  const { mevcut_stok } = req.body;

  console.log(`Stok gÃ¼ncelleme isteÄŸi alÄ±ndÄ±: ID=${id}, Yeni Stok=${mevcut_stok}`); // Loglama eklendi

  if (mevcut_stok === undefined) {
    return res.status(400).json({ hata: 'Mevcut stok bilgisi eksik.' });
  }

  try {
    const [result] = await db.query('UPDATE stoklar SET mevcut_stok = ? WHERE id = ?', [mevcut_stok, id]);
    if (result.affectedRows === 0) {
      return res.status(404).json({ hata: 'GÃ¼ncellenecek Ã¼rÃ¼n bulunamadÄ±.' });
    }
    res.json({ mesaj: 'Stok baÅŸarÄ±yla gÃ¼ncellendi.' });
  } catch (err) {
    console.error('ğŸ›‘ VeritabanÄ± gÃ¼ncelleme hatasÄ±:', err);
    res.status(500).json({ hata: 'VeritabanÄ± gÃ¼ncellenirken bir hata oluÅŸtu.' });
  }
});

// Depo stoklarÄ± getir
app.get('/depo_stoklar', async (req, res) => {
  try {
    const [results] = await db.query('SELECT * FROM depo_stoklar');
    res.json(results);
  } catch (err) {
    console.error('ğŸ›‘ Depo veritabanÄ± sorgu hatasÄ±:', err);
    res.status(500).json({ hata: "Depo veritabanÄ± hatasÄ±" });
  }
});

// Depo stok gÃ¼ncelleme
app.patch('/depo_stoklar/:id', async (req, res) => {
  const { id } = req.params;
  const { mevcut_stok } = req.body;

  if (mevcut_stok === undefined) {
    return res.status(400).json({ hata: 'Mevcut stok bilgisi eksik.' });
  }

  try {
    const [result] = await db.query('UPDATE depo_stoklar SET mevcut_stok = ? WHERE id = ?', [mevcut_stok, id]);
    if (result.affectedRows === 0) {
      return res.status(404).json({ hata: 'GÃ¼ncellenecek depo Ã¼rÃ¼nÃ¼ bulunamadÄ±.' });
    }
    res.json({ mesaj: 'Depo stoku baÅŸarÄ±yla gÃ¼ncellendi.' });
  } catch (err) {
    console.error('ğŸ›‘ Depo veritabanÄ± gÃ¼ncelleme hatasÄ±:', err);
    res.status(500).json({ hata: 'Depo veritabanÄ± gÃ¼ncellenirken bir hata oluÅŸtu.' });
  }
});

// Sunucuyu baÅŸlat
const PORT = 8000;
app.listen(PORT, () => {
  console.log(`ğŸš€ Sunucu ${PORT} portunda Ã§alÄ±ÅŸÄ±yor.`);
});


